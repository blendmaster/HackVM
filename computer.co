"use strict"
@vm = 
	map_screen: (addr, value) -> # lots of dirty work to transform jack memory map into pixels
		# each screen word is 16 pixels and each @screen pixel is 4 bytes (RGBA)
		offset = ( addr - 16384 ) * 16 * 4
		p = 0 # pixel offset of memory value
		for i from offset til offset + 64 by 4 # 64 bits -> 4 bytes
			# get bit at position p to get 0->255 (white) or 1->0 (black)
			pixel = if (value >> p++ & 1) then 0 else 255
			@screen.data[ i ] = pixel #R
			@screen.data[ i + 1 ] = pixel #G
			@screen.data[ i + 2 ] = pixel #B

		# queue screen redraw next time execution pauses,
		# either at Sys.wait or key access
		# this avoids redraws which aren't really visible anyway
		unless @refresh
			@refresh = setTimeout do
				-> 
					vm.canvas.putImageData vm.screen, 0 0
					vm.refresh = void
				0

	# beep boop
	boot: !->
		# two bytes per 16 bit int
		# RAM is cleared on boot
		# length 24577 since address 24576 is the keyboard map
		#
		# We still need this even in a virtual machine so that
		# the Hack OS's direct memory access and memory maps still work
		# otherwise, we could just make our own stacks with native JS
		# Arrays
		@RAMBuffer = new ArrayBuffer 24577 * 2
		@RAM = new Int16Array @RAMBuffer

		# initialize screen
		@canvas.fillStyle = \white
		@canvas.fillRect 0 0 512 256 # make screen opaque white
		# screen now contains opaque white pixels
		@screen = @canvas.getImageData 0 0 512 256

		# since functions need to be able to pause themselves so keyboard events
		# can be processed, we store a manual callstack, starting with 
		# Sys.init
		@callstack = [@functions.\Sys.init]
		
		# reset label to start of Sys.init
		@label = 0

		# set stack pointer to 261, simulating Sys.init call
		@RAM[0] = 261

		@booted = true
		#
		# flag indicating need to keyboard IO
		@io = false

		# gonna cheat a bit and rewrite the implementations
		# of some Jack-level OS functions to make the VM run faster and better
		
		# no infinite while loop, just clear callstack
		@functions.\Sys.halt = !-> 
			vm.callstack = []
		
		# actually use setTimeout
		@functions.\Sys.wait = !->
			RAM = vm.RAM
			vm.pause = RAM[ RAM[ 2 ] ] # argument 0
			# regular return
			frame = RAM[ 1 ]
			vm.label = RAM[ frame - 5 ] 
			RAM[ RAM[ 2 ] ] = RAM[ --RAM[0] ]
			RAM[ 0 ] = RAM[ 2 ] + 1
			RAM[ 4 ] = RAM[ frame - 1 ]
			RAM[ 3 ] = RAM[ frame - 2 ]
			RAM[ 2 ] = RAM[ frame - 3 ]
			RAM[ 1 ] = RAM[ frame - 4]
			vm.callstack.pop! 

		# TODO rewrite keyboard functions that poll kb to instead wait
		# for event to fire

	start: !-> 
		vm.boot! unless vm.booted
		vm.running = true

		while (len = vm.callstack.length) > 0
			# call top function starting at the given label
			# passing the label in simulates the setting of the program counter
			# to the correct return instruction
			vm.callstack[len-1] vm.label
			if vm.io # pause to clear keyboard callback
				vm.io = false
				vm.timeout = setTimeout vm.start, 0
				return 
			if vm.pause # handle custom Sys.wait
				vm.timeout = setTimeout vm.start, vm.pause
				vm.pause = 0
				return

		vm.running = false

	stop: !->
		vm.running = false
		clearTimeout vm.timeout

	reset: !->
		vm.stop!
		vm.boot!

	# remap some keys to vm spec
	keys:
		13: 128 # enter
		8: 129 # backspace
		37: 130 # left arrow
		38: 131 # up arrow
		39: 132 # right arrow
		40: 133 # down arrow
		36: 134 # home
		35: 135 # end
		33: 136 # page up
		34: 137 # page down
		46: 139 # delete
		27: 140 # escape
		# f1-f12
		112: 141
		113: 142
		114: 143
		115: 144
		116: 145
		117: 146
		118: 147
		119: 148
		120: 149
		121: 150
		122: 151
		123: 152
		# ASCII keys that javascript doesn't map correctly
		186: 59 # ;
		187: 61 # =
		188: 44 # ,
		189: 45 # -
		190: 46 # .
		191: 47 # /
		192: 96 # `
		219: 91 # [
		220: 92 # \
		221: 93 # ]
		222: 39 # '
		# javascript has these weird math key codes that override = and -
		107: 61
		109: 45

	keyboard: ({keyCode: key}: e) ->
		# XXX pressing unsupport vm keys, but supported js keys,
		# like shift, ctrl, etc will change RAM, but won't really be valid in vm
		vm.RAM[24576] = vm.keys[key] or key if vm.booted # remapped or just ascii
		e.preventDefault! if vm.running # prevent scrolling, text searching, etc...

	clearkeyboard: -> vm.RAM[24576] = 0 if vm.booted


