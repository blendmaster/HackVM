"use strict"

# translates vm files into javascript functions corresponding to
# the VM functions. However, the native 
# javascript call stack can't be used because:
#
# 1. getting keyboard input requires the code to be paused at a
# 	certain point, which javascript can't do.
# 
# 2. The stack frame has to be stored in RAM anyway for the hack platform
# 	specific features like Memory.poke and Screen access to work as 
# 	expected. This also means that using native JS Arrays to implement
# 	the different stacks is impossible (e.g. locals.push() instead of
# 	RAM[ RAM[0]++ ] = RAM[ RAM[LCL] ])
#
# This approach is similar to what emscripten does for LLVM->JS,
# but I don't have their fancy Relooping algorithm for converting
# labels back to native javascript control statements, at least not yet.
arithmetic = add: \+, sub: \-, and: \&, or: \|
unary = neg: \-, not: \~
boolean = eq: \===, gt: \>, lt: \<

# ram positions of segments
LCL = 1
ARG = 2
THIS = 3
THAT = 4

push_base = (base) -> -> "RAM[ SP++ ] = RAM[ #base + #it ]"
push_segment = 
	constant: -> "RAM[ SP++ ] = #it"
	argument: push_base \ARG
	local: push_base \LCL
	this: push_base \THIS
	
	# that defined inside loop to close over labels, so keyboard access can
	# resume itself
	
	temp: -> "RAM[ SP++ ] = RAM[ #{5 + parseInt it, 10} ]"

	# since THIS and THAT are cached, pointer pushes cached values
	pointer: -> 
		"RAM[ SP++ ] = #{switch addr = parseInt it, 10
			case 0 then \THIS
			case 1 then \THAT
			default then "RAM[ #{3 + addr} ]"}"

pop_to_base = (base) -> -> "RAM[ #base + #it ]"
pop_segment = 
	argument: pop_to_base \ARG
	local: pop_to_base \LCL
	this: pop_to_base \THIS

	# need to handle writing to screen 
	that: -> 
		"addr = THAT + #it;
		if( addr >= 16384 && addr < 24576 ) { vm.map_screen( addr, RAM[ SP - 1 ] ); }
		RAM[ addr ]" # = RAM[ --SP ]
	
	temp: -> "RAM[ #{5 + parseInt it, 10} ]"

	# work with cached this and that
	pointer: -> 
		switch addr = parseInt it, 10
		case 0 then \THIS
		case 1 then \THAT
		default then "RAM[ #{3 + addr} ]"

# holds name of current function
# defined here, so flush can close over them
current_fn = void

# all the lines of code for the current function
code = []

# adds boilerplate and pushes a new function object with internal code
# equivalent to VM function
# in-ram pointers are cached at the beginning of the function
#  and recommitted in calls and returns, for better performance
flush = ->
	vm.functions[current_fn] = new Function do
		'label'
		"
		var RAM = vm.RAM, SP = RAM[0], LCL = RAM[1], ARG = RAM[2], THIS = RAM[3], THAT = RAM[4], frame, addr;
		loop: for(;;) {
			switch( label ) {
				case 0: #{code.join ';'};
			}
		}"
	# add name attribute to function for debugging
	vm.functions[current_fn].fn_name = current_fn

@translate = !->
	it = [it] unless Array.isArray it # wrap single files in an array
	
	# initialize and remove all previous functions
	vm.functions = {}

	# keep track of all the static variables used across the files
	static_addr = 16
	statics = {}

	it.forEach !(input, idx)-> # for each file, with unique index
		# start fresh
		current_fn := void

		# possible firefox bug, evaluates javascript:
		# switch(label) {
		# 	default: alert('hi');
		# }
		#
		# to an empty switch statement, i.e. if there are no case statements
		# in the switch, firefox leaves it blank. lame as hell
		# thus, we start at label 1, leaving label 0 for the beginning
		#
		# used to number each of the labels generated in the function
		label = void
		labels = void

		# this is defined here to take close over labels, so we can set
		# a label for keyboard returns
		push_segment.that = ->
			# assuming only the 'that' pointer will be used to access keyboard
			"addr = THAT + #it;
			if( addr == 24576 ) {
				vm.io = true;
				vm.label = #label;
				RAM[ 0 ] = SP;
				RAM[ #LCL ] = LCL;
				RAM[ #ARG ] = ARG;
				RAM[ #THIS ] = THIS; 
				RAM[ #THAT ] = THAT;
				return;
			}
			case #{label++}: 
				RAM[ SP++ ] = RAM[ THAT + #it ]"

		# these are closed over the current file
		push_segment.static = -> "RAM[ SP++ ] = RAM[ #{statics["#idx.#it"] ?= static_addr++} ]"
		pop_segment.static = -> "RAM[ #{statics["#idx.#it"] ?= static_addr++} ]"

		input # strip comments and whitespace, then split into lines
			.replace /\/\/.*/gm "" .trim! .split /\s*[\n\r]+\s*/
			.forEach !(it, i) -> # parse instructions
				if it.match /^push (constant|argument|local|static|this|that|pointer|temp) (\d+)$/
					code.push push_segment[that.1] that.2
				else if it.match /^pop (argument|local|static|this|that|pointer|temp) (\d+)$/
					code.push "#{pop_segment[that.1] that.2} = RAM[ --SP ]"
				else if match = it.match /^function ([A-Za-z\._\:][\w_\.\:]+) (\d+)$/
					flush! if current_fn
					# start new function
					code := [] 
					current_fn := match.1
					# initialize local variables
					for j til parseInt match.2, 10
						code.push "RAM[ SP++ ] = 0"
					label := 1
					labels := {}
				else if it.match /^call ([A-Za-z\._\:][\w_\.\:]+) (\d+)$/
					code.push do
						"RAM[ SP++ ] = #{label}" # pushing return address as label addr
						"RAM[ SP++ ] = LCL"
						"RAM[ SP++ ] = ARG"
						"RAM[ SP++ ] = THIS"
						"RAM[ SP++ ] = THAT"
						"RAM[ #ARG ] = SP - #{parseInt(that.2, 10) + 5}" # num of args + stack frame
						"RAM[ #LCL ] = SP"
						# recommit cached pointers
						"RAM[ 0 ] = SP" 
						"RAM[ #THIS ] = THIS" 
						"RAM[ #THAT ] = THAT" 
						
						"vm.callstack.push( vm.functions['#{that.1}'] )"
						"vm.label = 0" # set starting address for called function to beginning (default)
						"return" # give control to top of callstack
						"case #{label++}: " # returned from function
				else if it is \return
					code.push do
						"frame = LCL"
						"vm.label = RAM[ frame - 5 ]" # set "return address"
						"RAM[ ARG ] = RAM[ --SP ]"
						"RAM[0] = ARG + 1"
						"RAM[ #THAT ] = RAM[ frame - 1 ]"
						"RAM[ #THIS ] = RAM[ frame - 2 ]"
						"RAM[ #ARG ] = RAM[ frame - 3 ]"
						"RAM[ #LCL ] = RAM[ frame - 4]"
						"vm.callstack.pop()" # pop this function off callstack
						"return"
				else if it.match /^label ([A-Za-z\._\:][\w_\.\:]+)$/
					code.push "case #{labels[that.1] ?= label++ }: "
				else if it.match /^goto ([A-Za-z\._\:][\w_\.\:]+)$/
					code.push "label = #{labels[that.1] ?= label++ }; continue loop"
				else if it.match /^if-goto ([A-Za-z\._\:][\w_\.\:]+)$/
					code.push "if(RAM[ --SP ] !== 0) { label = #{labels[that.1] ?= label++ }; continue loop; }"
				else if arithmetic[it]
					code.push "RAM[ --SP - 1 ] = RAM[ SP - 1 ] #that RAM[ SP ]"
				else if boolean[it]
					code.push "RAM[ --SP - 1 ] = RAM[ SP - 1 ] #that RAM[ SP ] ? -1 : 0"
				else if unary[it]
					code.push "RAM[ SP - 1 ] = #{that}RAM[ SP - 1 ]"
				else
					throw new Error """couldn't parse "#it" around line #i in file "#name"!"""
		# flush last function
		flush! # add to vm.functions

